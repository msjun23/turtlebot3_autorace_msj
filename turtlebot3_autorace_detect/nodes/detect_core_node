#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert, Ashe Kim
# 2nd Author: Seokjun Moon
# For Turtlebot3 AutoRace 2021

from pickle import STRING
import time
import rospy
import numpy as np
import os
import cv2
from enum import Enum
from std_msgs.msg import UInt8, String
from sensor_msgs.msg import Image, CompressedImage
from cv_bridge import CvBridge, CvBridgeError

class DetectSign():
    cnt = 0
    mission_list = ['intersection', 'construction', 'parking', 'level_crossing', 'tunnel', 'TheEnd']
    mission_num = 0

    def __init__(self):
        self.fnPreproc()

        # subscribes raw image
        self.sub_image_original = rospy.Subscriber('/detect/image_input', Image, self.cbFindTrafficSign, queue_size = 1)

        #publishes
        self.pub_traffic_sign = rospy.Publisher('/detect/traffic_sign', UInt8, queue_size=1)
        self.pub_mission = rospy.Publisher('/detect/mission', String, queue_size=1)

        # publishes traffic sign image in raw type
        self.pub_image_traffic_sign = rospy.Publisher('/detect/image_output', Image, queue_size = 1)

        self.cvBridge = CvBridge()
        self.TrafficSign1 = Enum('TrafficSign', 'intersection left right')
        self.TrafficSign2 = Enum('TrafficSign', 'construction')
        self.TrafficSign3 = Enum('TrafficSign', 'parking')
        self.TrafficSign4 = Enum('TrafficSign', 'stop')
        self.TrafficSign5 = Enum('TrafficSign', 'tunnel')
        self.counter = 1

    def fnPreproc(self):
        # Initiate SIFT detector
        self.sift = cv2.xfeatures2d.SIFT_create()

        dir_path = os.path.dirname(os.path.realpath(__file__))
        dir_path = dir_path.replace('turtlebot3_autorace_detect/nodes', 'turtlebot3_autorace_detect/')
        dir_path += 'image/'

        self.img_intersection = cv2.imread(dir_path + 'intersection.png',0)
        self.img_left  = cv2.imread(dir_path + 'left.png',0)
        self.img_right = cv2.imread(dir_path + 'right.png',0)
        self.kp_intersection, self.des_intersection  = self.sift.detectAndCompute(self.img_intersection, None)
        self.kp_left, self.des_left  = self.sift.detectAndCompute(self.img_left, None)
        self.kp_right, self.des_right = self.sift.detectAndCompute(self.img_right, None)

        self.img_construction  = cv2.imread(dir_path + 'construction.png',0)
        self.kp_construction, self.des_construction  = self.sift.detectAndCompute(self.img_construction, None)

        self.img_parking = cv2.imread(dir_path + 'parking.png',0)      # trainImage2   
        self.kp_parking, self.des_parking = self.sift.detectAndCompute(self.img_parking,None)

        self.img_stop = cv2.imread(dir_path + 'stop.png',0)         # trainImage1
        self.kp_stop, self.des_stop = self.sift.detectAndCompute(self.img_stop,None)

        self.img_tunnel = cv2.imread(dir_path + 'tunnel.png',0)       # trainImage3
        self.kp_tunnel, self.des_tunnel = self.sift.detectAndCompute(self.img_tunnel,None)

        FLANN_INDEX_KDTREE = 0
        index_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 5)
        search_params = dict(checks = 50)

        self.flann = cv2.FlannBasedMatcher(index_params, search_params)

    def fnCalcMSE(self, arr1, arr2):
            squared_diff = (arr1 - arr2) ** 2
            sum = np.sum(squared_diff)
            num_all = arr1.shape[0] * arr1.shape[1] #cv_image_input and 2 should have same shape
            err = sum / num_all
            return err

    def cbFindTrafficSign(self, image_msg):
        if (self.mission_list[self.mission_num] == "intersection"):
            # drop the frame to 1/5 (6fps) because of the processing speed. This is up to your computer's operating power.
            if self.counter % 3 != 0:
                self.counter += 1
                return
            else:
                self.counter = 1

            cv_image_input = self.cvBridge.imgmsg_to_cv2(image_msg, "bgr8")

            MIN_MATCH_COUNT = 9 #9
            MIN_MSE_DECISION = 50000 #50000

            # find the keypoints and descriptors with SIFT
            kp1, des1 = self.sift.detectAndCompute(cv_image_input,None)

            matches_intersection = self.flann.knnMatch(des1,self.des_intersection,k=2)
            matches_left = self.flann.knnMatch(des1,self.des_left,k=2)
            matches_right = self.flann.knnMatch(des1,self.des_right,k=2)

            image_out_num = 1

            good_intersection = []
            for m,n in matches_intersection:
                if m.distance < 0.7*n.distance:
                    good_intersection.append(m)
            if len(good_intersection)>MIN_MATCH_COUNT:
                src_pts = np.float32([kp1[m.queryIdx].pt for m in good_intersection ]).reshape(-1,1,2)
                dst_pts = np.float32([self.kp_intersection[m.trainIdx].pt for m in good_intersection]).reshape(-1,1,2)

                M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
                matches_intersection = mask.ravel().tolist()

                mse = self.fnCalcMSE(src_pts, dst_pts)
                if mse < MIN_MSE_DECISION:
                    msg_sign = UInt8()
                    msg_sign.data = self.TrafficSign1.intersection.value

                    self.pub_traffic_sign.publish(msg_sign)
                    rospy.loginfo("detect intersection sign, mse: %d", mse)
                    image_out_num = 2
                # else:
                #     rospy.loginfo("can't detect intersection sign, mse: %d", mse)

            good_left = []
            for m,n in matches_left:
                if m.distance < 0.7*n.distance:
                    good_left.append(m)
            if len(good_left)>MIN_MATCH_COUNT:
                src_pts = np.float32([kp1[m.queryIdx].pt for m in good_left ]).reshape(-1,1,2)
                dst_pts = np.float32([self.kp_left[m.trainIdx].pt for m in good_left]).reshape(-1,1,2)

                M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
                matches_left = mask.ravel().tolist()

                mse = self.fnCalcMSE(src_pts, dst_pts)
                if mse < MIN_MSE_DECISION:
                    msg_sign = UInt8()
                    msg_sign.data = self.TrafficSign1.left.value

                    self.pub_traffic_sign.publish(msg_sign)
                    rospy.loginfo("detect left sign, mse: %d", mse)
                    image_out_num = 3
                # else:
                #     rospy.loginfo("left: nothing detected, mse: %d", mse)
            else:
                matches_left = None
                # rospy.loginfo("nothing detected")

            good_right = []
            for m,n in matches_right:
                if m.distance < 0.7*n.distance:
                    good_right.append(m)
            if len(good_right)>MIN_MATCH_COUNT:
                src_pts = np.float32([kp1[m.queryIdx].pt for m in good_right ]).reshape(-1,1,2)
                dst_pts = np.float32([self.kp_right[m.trainIdx].pt for m in good_right]).reshape(-1,1,2)

                M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
                matches_right = mask.ravel().tolist()

                mse = self.fnCalcMSE(src_pts, dst_pts)
                if mse < MIN_MSE_DECISION:
                    msg_sign = UInt8()
                    msg_sign.data = self.TrafficSign1.right.value

                    self.pub_traffic_sign.publish(msg_sign)
                    rospy.loginfo("detect right sign, mse: %d", mse)
                    image_out_num = 4
                # else:
                #     rospy.loginfo("right: nothing detected, mse: %d", mse)
            else:
                matches_right = None
                # rospy.loginfo("nothing detected")

            # nothing detected
            if image_out_num == 1:
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(cv_image_input, "bgr8"))
                self.cnt = 0

            # detect intersection sign
            elif image_out_num == 2:
                draw_params_intersection = dict(matchColor = (255,0,0), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matches_intersection, # draw only inliers
                            flags = 2)

                final_intersection = cv2.drawMatches(cv_image_input,kp1,self.img_intersection,self.kp_intersection,good_intersection,None,**draw_params_intersection)

                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final_intersection, "bgr8"))

                self.cnt += 1
                if (self.cnt == 5):
                    self.pub_mission.publish("Intersection")
                    self.cnt = 0

            # detect left sign
            elif image_out_num == 3:
                draw_params_left = dict(matchColor = (255,0,0), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matches_left, # draw only inliers
                            flags = 2)

                final_left = cv2.drawMatches(cv_image_input,kp1,self.img_left,self.kp_left,good_left,None,**draw_params_left)

                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final_left, "bgr8"))

                self.cnt += 1
                if (self.cnt == 5):
                    self.pub_mission.publish("Left")
                    self.cnt = 0
                    self.mission_num += 1

            # detect right sign
            elif image_out_num == 4:
                draw_params_right = dict(matchColor = (255,0,0), # draw matches in green color
                                singlePointColor = None,
                                matchesMask = matches_right, # draw only inliers
                                flags = 2)

                fianl_right = cv2.drawMatches(cv_image_input,kp1,self.img_right,self.kp_right,good_right,None,**draw_params_right)

                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(fianl_right, "bgr8"))

                self.cnt += 1
                if (self.cnt == 5):
                    self.pub_mission.publish("Intersection")
                    self.cnt = 0
                    self.mission_num += 1
        elif (self.mission_list[self.mission_num] == "construction"):
            # drop the frame to 1/5 (6fps) because of the processing speed. This is up to your computer's operating power.
            if self.counter % 3 != 0:
                self.counter += 1
                return
            else:
                self.counter = 1

            cv_image_input = self.cvBridge.imgmsg_to_cv2(image_msg, "bgr8")

            MIN_MATCH_COUNT = 9 #9
            MIN_MSE_DECISION = 50000

            # find the keypoints and descriptors with SIFT
            kp1, des1 = self.sift.detectAndCompute(cv_image_input,None)

            matches_construction = self.flann.knnMatch(des1,self.des_construction,k=2)
        
            image_out_num = 1

            good_construction = []
            for m,n in matches_construction:
                if m.distance < 0.7*n.distance:
                    good_construction.append(m)
            if len(good_construction)>MIN_MATCH_COUNT:
                src_pts = np.float32([kp1[m.queryIdx].pt for m in good_construction ]).reshape(-1,1,2)
                dst_pts = np.float32([self.kp_construction[m.trainIdx].pt for m in good_construction]).reshape(-1,1,2)

                M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
                matches_construction = mask.ravel().tolist()

                mse = self.fnCalcMSE(src_pts, dst_pts)
                if mse < MIN_MSE_DECISION:
                    msg_sign = UInt8()
                    msg_sign.data = self.TrafficSign2.construction.value

                    self.pub_traffic_sign.publish(msg_sign)

                    rospy.loginfo("construction")
                    image_out_num = 2
            else:
                matches_construction = None
                #rospy.loginfo("not found")

            # nothing detected
            if image_out_num == 1:
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(cv_image_input, "bgr8"))

            # construction sign is detected
            elif image_out_num == 2:
                draw_params_construction = dict(matchColor = (255,0,0), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matches_construction, # draw only inliers
                            flags = 2)

                final_construction = cv2.drawMatches(cv_image_input,kp1,self.img_construction,self.kp_construction,good_construction,None,**draw_params_construction)

                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final_construction, "bgr8"))

                self.cnt += 1
                if (self.cnt == 5):
                    self.pub_mission.publish("Construction")
                    self.cnt = 0
                    self.mission_num += 1
        elif (self.mission_list[self.mission_num] == "parking"):
            # drop the frame to 1/5 (6fps) because of the processing speed. This is up to your computer's operating power.
            if self.counter % 3 != 0:
                self.counter += 1
                return
            else:
                self.counter = 1

            cv_image_input = self.cvBridge.imgmsg_to_cv2(image_msg, "bgr8")

            MIN_MATCH_COUNT = 9
            MIN_MSE_DECISION = 50000

            # find the keypoints and descriptors with SIFT
            kp1, des1 = self.sift.detectAndCompute(cv_image_input,None)

            matches_parking = self.flann.knnMatch(des1,self.des_parking,k=2)    
            image_out_num = 1

            good_parking = []
            for m,n in matches_parking:
                if m.distance < 0.7*n.distance:
                    good_parking.append(m)

            if len(good_parking)>MIN_MATCH_COUNT:
                src_pts = np.float32([ kp1[m.queryIdx].pt for m in good_parking ]).reshape(-1,1,2)
                dst_pts = np.float32([ self.kp_parking[m.trainIdx].pt for m in good_parking ]).reshape(-1,1,2)

                M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
                matchesMask_parking = mask.ravel().tolist()

                mse = self.fnCalcMSE(src_pts, dst_pts)
                if mse < MIN_MSE_DECISION:
                    msg_sign = UInt8()
                    msg_sign.data = self.TrafficSign3.parking.value

                    self.pub_traffic_sign.publish(msg_sign)

                    rospy.loginfo("parking")
                    image_out_num = 2
            else:
                matchesMask_parking = None
                #rospy.loginfo("nothing")

            # nothing detected
            if image_out_num == 1:
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(cv_image_input, "bgr8"))

            # parking sign is detected
            elif image_out_num == 2:
                draw_params_parking = dict(matchColor = (255,0,0), # draw matches in green color
                                singlePointColor = None,
                                matchesMask = matchesMask_parking, # draw only inliers
                                flags = 2)

                final_parking = cv2.drawMatches(cv_image_input,kp1,self.img_parking,self.kp_parking,good_parking,None,**draw_params_parking)

                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final_parking, "bgr8"))

                self.cnt += 1
                if (self.cnt == 5):
                    self.pub_mission.publish("Parking")
                    self.cnt = 0
                    self.mission_num += 1
        elif (self.mission_list[self.mission_num] == "level_crossing"):
            # drop the frame to 1/5 (6fps) because of the processing speed. This is up to your computer's operating power.
            if self.counter % 3 != 0:
                self.counter += 1
                return
            else:
                self.counter = 1

            cv_image_input = self.cvBridge.imgmsg_to_cv2(image_msg, "bgr8")

            MIN_MATCH_COUNT = 4 #9
            MIN_MSE_DECISION = 50000

            # find the keypoints and descriptors with SIFT
            kp1, des1 = self.sift.detectAndCompute(cv_image_input,None)

            matches_stop = self.flann.knnMatch(des1,self.des_stop,k=2)

            image_out_num = 1

            good_stop = []
            for m,n in matches_stop:
                if m.distance < 0.7*n.distance:
                    good_stop.append(m)

            if len(good_stop)>MIN_MATCH_COUNT:
                src_pts = np.float32([ kp1[m.queryIdx].pt for m in good_stop ]).reshape(-1,1,2)
                dst_pts = np.float32([ self.kp_stop[m.trainIdx].pt for m in good_stop ]).reshape(-1,1,2)

                M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
                matches_stop = mask.ravel().tolist()

                mse = self.fnCalcMSE(src_pts, dst_pts)
                if mse < MIN_MSE_DECISION:
                    msg_sign = UInt8()
                    msg_sign.data = self.TrafficSign4.stop.value

                    self.pub_traffic_sign.publish(msg_sign)

                    rospy.loginfo("stop")
                    image_out_num = 2
            else:
                matches_stop = None
                #rospy.loginfo("nothing")

            # nothing detected
            if image_out_num == 1:
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(cv_image_input, "bgr8"))

            # stop sign is detected
            elif image_out_num == 2:
                draw_params_level_crossing = dict(matchColor = (255,0,0), # draw matches in green color
                                singlePointColor = None,
                                matchesMask = matches_stop, # draw only inliers
                                flags = 2)

                final_stop = cv2.drawMatches(cv_image_input,kp1,self.img_stop,self.kp_stop,good_stop,None,**draw_params_level_crossing)

                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final_stop, "bgr8"))

                self.cnt += 1
                if (self.cnt == 5):
                    self.pub_mission.publish("LevelCrossing")
                    self.cnt = 0
                    self.mission_num += 1
        elif (self.mission_list[self.mission_num] == "tunnel"):
            # drop the frame to 1/5 (6fps) because of the processing speed. This is up to your computer's operating power.
            if self.counter % 3 != 0:
                self.counter += 1
                return
            else:
                self.counter = 1

            cv_image_input = self.cvBridge.imgmsg_to_cv2(image_msg, "bgr8")

            MIN_MATCH_COUNT = 5
            MIN_MSE_DECISION = 50000

            # find the keypoints and descriptors with SIFT
            kp1, des1 = self.sift.detectAndCompute(cv_image_input,None)
            matches_tunnel = self.flann.knnMatch(des1,self.des_tunnel,k=2)

            image_out_num = 1

            good_tunnel = []
            for m,n in matches_tunnel:
                if m.distance < 0.7*n.distance:
                    good_tunnel.append(m)
            if len(good_tunnel)>MIN_MATCH_COUNT:
                src_pts = np.float32([ kp1[m.queryIdx].pt for m in good_tunnel ]).reshape(-1,1,2)
                dst_pts = np.float32([ self.kp_tunnel[m.trainIdx].pt for m in good_tunnel ]).reshape(-1,1,2)

                M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
                matchesMask_tunnel = mask.ravel().tolist()

                mse = self.fnCalcMSE(src_pts, dst_pts)
                if mse < MIN_MSE_DECISION:
                    msg_sign = UInt8()
                    msg_sign.data = self.TrafficSign5.tunnel.value

                    self.pub_traffic_sign.publish(msg_sign)

                    rospy.loginfo("tunnel")
                    image_out_num = 2
            else:
                matchesMask_tunnel = None
                #rospy.loginfo("nothing")

            # nothing detected
            if image_out_num == 1:
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(cv_image_input, "bgr8"))

            # tunnel sign is detected
            elif image_out_num == 2:
                draw_params_tunnel = dict(matchColor = (255,0,0), # draw matches in green color
                                singlePointColor = None,
                                matchesMask = matchesMask_tunnel, # draw only inliers
                                flags = 2)

                final_tunnel = cv2.drawMatches(cv_image_input,kp1,self.img_tunnel,self.kp_tunnel,good_tunnel,None,**draw_params_tunnel)
                
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final_tunnel, "bgr8"))

                self.cnt += 1
                if (self.cnt == 5):
                    self.pub_mission.publish("Tunnel")
                    self.cnt = 0
                    self.mission_num += 1
        else:
            rospy.loginfo("All Mission is Cleared!")

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_sign')
    node = DetectSign()
    node.main()
